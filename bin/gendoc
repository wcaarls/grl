#!/usr/bin/python3

import yaml
import os, inspect, sys, string
from grllib import *

def escape(s):
  t = s.replace('_', '\\_')
  return t.replace('&', '\\&')

# Load class parameter requests, generated by requestgen
binpath = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
stream = open(binpath + '/requests.yaml', 'r')
requests = yaml.safe_load(stream)

# Loop over all classes
prev_super = ""
objects = findrequests(requests, "")
for o in objects:
  # Detect change in superclass
  super = o[0:o.find('/')]
  if super != prev_super:
    if super[-1] == 'y':
      plural = super[0:-1] + 'ies'
    elif super[-1] == 's':
      plural = super
    else:
      plural = super + 's'

    # Start new section
    print("\\section{" + escape(plural[0].upper() + plural[1:]) + "}")
    prev_super = super

  # Each class in its own section
  print("\\subsection{" + escape(o) + "}")
  
  req = requests[o]
  if req:
    # Find out whether class requires and/or provides parameters
    has_provided = False
    has_requests = False
    for p in req:
      if p != 'description':
        if req[p]["mutability"] == "provided":
          has_provided = True
        else:
          has_requests = True
    
    # Print description
    print("\\noindent " + escape(req["description"]) + "\\\\\n")

    # If class requires parameters, print in table
    if has_requests:
      print("\\noindent\\begin{tabular}{@{}lll@{}}")

      for p in req:
        if p != "description" and req[p]["mutability"] != "provided":
          # Print parameter name, type and description
          print(escape(p) + "&" + escape(req[p]["type"]) + "&" + escape(req[p]["description"]) + "\\\\")
    
      print("\\end{tabular}")

    # If class has provided parameters, print in table
    if has_provided:
      # Fix spacing if class also request parameters
      if has_requests:
        print("\\\\\n")
    
      print("\\noindent Provided parameters\\\\\n\n\\noindent\\begin{tabular}{@{}lll@{}}")

      for p in req:
        if p != "description" and req[p]["mutability"] == "provided":
          # Print parameter name, type and description
          print(escape(p) + "&" + escape(req[p]["type"]) + "&" + escape(req[p]["description"]) + "\\\\")
    
      print("\\end{tabular}")
