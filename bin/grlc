#!/usr/bin/python3

import yaml
from tkinter import *
from tkinter.ttk import *
from functools import partial
import io
import os, inspect, sys, subprocess, time, signal, copy

from grllib import *
from tooltip import *

grld_process = None
grld_executable = None

class GrlMain:
  """Main window. Contains action buttons (save, run, add toplevel) and scrollable frame for GrlTopObjects."""
  def __init__(self, master):
    self.row = 0

    # Scrollable frame for GrlTopObjects.
    self.canvas = Canvas(master, borderwidth=0)
    self.frame = Frame(self.canvas)
    self.vsb = Scrollbar(master, orient="vertical", command=self.canvas.yview)
    self.canvas.configure(yscrollcommand=self.vsb.set)
    
    self.vsb.pack(side="right", fill="y")
    self.canvas.pack(side="left", fill="both", expand=True)
    self.canvas.create_window((4,4), window=self.frame, anchor="nw", 
                              tags="self.frame")
    self.frame.bind("<Configure>", self.OnFrameConfigure)
    
    master.bind_all("<Button-4>", self.OnMousewheelUp)
    master.bind_all("<Button-5>", self.OnMousewheelDown)
    master.bind_all("<Control-s>", self.save)
    master.bind_all("<Control-r>", self.run)

    # Buttons
    self.savebutton = Button(
          self.frame, text="Save", command=self.save
          )
    self.savebutton.grid(column=0, row=99, sticky=SW+E)
    self.runbutton = Button(
          self.frame, text="Run", command=self.run
          )
    self.runbutton.grid(column=1, row=99, sticky=SW+E)
    self.addbutton = Button(
          self.frame, text="+", command=self.add
          )
    self.addbutton.grid(column=2, row=99, sticky=S)
    
    self.objlist = list()
    self.add()
          
  def OnFrameConfigure(self, event):
    '''Reset the scroll region to encompass the inner frame'''
    self.canvas.configure(scrollregion=self.canvas.bbox("all"))

    self.canvas['width'] = self.frame.winfo_width()
    self.canvas['height'] = self.frame.winfo_height()

  def OnMousewheelUp(self, event):
      self.canvas.yview_scroll(-1, "units")
  def OnMousewheelDown(self, event):
      self.canvas.yview_scroll(1, "units")

  def remove(self, child):
    child.destroy()
    self.objlist.remove(child)

  def save(self, event=None):
    print("Writing", savefile)
    output = open(savefile, "w")
    self.write(output)
    output.close()
    
  def run(self, event=None):
    global grld_process
    
    if grld_process and grld_process.poll() == None:
      grld_process.send_signal(signal.SIGINT)
      time.sleep(0.1)
      grld_process.send_signal(signal.SIGINT)
      grld_process.wait()
    elif self.runbutton['text'] == 'Run':
      print("Writing", tempfile)
      output = open(tempfile, "w")
      self.write(output)
      output.close()
      grld_process = subprocess.Popen([grld_executable, tempfile], stdin=subprocess.PIPE)

    app.refresh()
    
  def add(self, event=None):
    obj = GrlTopObject(self, self.row)
    self.objlist.append(obj)
    self.row = self.row + 1
    
    self.refresh()
    
  def refresh(self):
    """Recalculate available parameters at each level of the configuration tree."""
    global params
    params = dict()
    
    if not grld_executable:
      self.runbutton['text'] = 'Run'
      self.runbutton.state(['disabled'])
    elif grld_process and grld_process.poll() == None:
      self.savebutton.state(['disabled'])
      self.runbutton.state(['!disabled'])
      self.runbutton['text'] = 'Stop'
      self.addbutton.state(['disabled'])
    else:
      self.savebutton.state(['!disabled'])
      self.runbutton.state(['!disabled'])
      self.runbutton['text'] = 'Run'
      self.addbutton.state(['!disabled'])
  
    for obj in self.objlist:
      obj.refresh()
    
  def write(self, output):
    for obj in self.objlist:
      obj.write(output, 0)
      
  def load(self, config):
    for obj in self.objlist:
      obj.destroy()
    self.objlist = list()
  
    for item in config:
      self.add()
      self.objlist[-1].load(item, config[item])
      
class GrlTopObject:
  """Top-level object. Contains editable name and frame for GrlObjects."""
  def __init__(self, parent, row):
    self.parent = parent
    self.entry = Entry(parent.frame, width=10)
    self.entry.grid(row=row, column=0, sticky=NW)
    if row == 0:
      self.entry.insert(0, "experiment")
    self.frame = Frame(parent.frame)
    self.frame.grid(row=row, column=1, sticky=NW+E)
    self.frame.grid_columnconfigure(0, weight=1)
    self.obj = GrlObject(self, {'type': '', 'description':'Top-level object', 'optional':0, 'mutability':'configuration'})
    self.removebutton = Button(
      parent.frame, text="-", command=partial(parent.remove, self)
      )
    self.removebutton.grid(row=row, column=2, sticky=S)
    
  def refresh(self):
    if grld_process and grld_process.poll() == None:
      self.entry.state(['disabled'])
      self.removebutton.state(['disabled'])
    else:
      self.entry.state(['!disabled'])
      self.removebutton.state(['!disabled'])
  
    self.obj.refresh(self.entry.get())
  
  def destroy(self):
    self.removebutton.grid_forget()
    self.removebutton.destroy()
    self.obj.destroy()
    self.frame.grid_forget()
    self.frame.destroy()
    self.entry.grid_forget()
    self.entry.destroy()
    
  def write(self, output, indent):
    print(''.ljust(indent) + self.entry.get() + ": ", file=output, end='')
    self.obj.write(output, indent+2)
    
  def load(self, name, config):
    self.entry.delete(0, END)
    self.entry.insert(0, name)
    self.obj.load(config)
    
  def path(self):
    return self.entry.get()

class GrlSubObject:
  """Sub-object. Contains fixed name label and frame for Object."""
  def __init__(self, parent, name, spec, row):
    self.parent = parent
    self.name = name
    self.label = Label(parent.frame, text=name)
    self.label.grid(column=0, row=row, sticky=NW)
    self.frame = Frame(parent.frame)
    self.frame.grid(column=1, row=row, sticky=NW+E)
    self.frame.grid_columnconfigure(0, weight=1)
    
    if spec["type"] and spec["type"][0] == '[':
      self.obj = GrlObjectList(self, spec)
    else:
      self.obj = GrlObject(self, spec)
    
  def refresh(self, path):
    self.obj.refresh(path + "/" + self.name)
    
  def destroy(self):
    self.obj.destroy()
    self.frame.grid_forget()
    self.frame.destroy()
    self.label.grid_forget()
    self.label.destroy()
    
  def write(self, output, indent):
    suboutput = io.StringIO()
    self.obj.write(suboutput, indent+2)
    
    if suboutput.getvalue() != '\n':
      print(''.ljust(indent) + self.label.cget("text") + ":", suboutput.getvalue(), file=output, end='')
    
  def load(self, config):
    self.label['text'] = self.name
    self.obj.load(config)

  def path(self):
    return self.parent.path() + "/" + self.name
  
class GrlObjectList:
  """List of objects. Contains frames for ObjectListItems and add button."""
  def __init__(self, parent, spec):
    self.parent = parent
    self.spec = copy.deepcopy(spec)
    self.spec["type"] = self.spec["type"][1:-1]
    self.row = 0
    self.frame = parent.frame
    
    self.addbutton = Button(
          self.frame, text="+", command=self.add
          )
    self.addbutton.grid(column=2, row=99, sticky=S)

    self.objlist = list()
    self.add()
    
  def add(self, event=None):
    obj = GrlObjectListItem(self, self.row)
    self.objlist.append(obj)
    self.row = self.row + 1
    
    obj.row = len(self.objlist)-1
    self.refresh(self.path())
    
  def remove(self, child):
    child.destroy()
    self.objlist.remove(child)
    
    for o in range(len(self.objlist)):
      self.objlist[o].row = o
      
    app.refresh()

  def refresh(self, path):
    for o in range(len(self.objlist)):
      self.objlist[o].refresh(path)
    
  def destroy(self):
    self.addbutton.destroy()
    for obj in self.objlist:
      obj.destroy()
    
  def write(self, output, indent):
    print('\n', file=output, end='')
    for obj in self.objlist:
      obj.write(output, indent)
    
  def load(self, config):
    for obj in self.objlist:
      obj.destroy()
    self.objlist = list()
  
    for item in config:
      self.add()
      self.objlist[-1].load(item)
      
  def path(self):
    return self.parent.path()

class GrlObjectListItem:
  """Item in an object list. Contains frame for Object and remove button."""
  def __init__(self, parent, row):
    self.parent = parent
    self.row = row
    
    self.frame = Frame(parent.frame)
    self.frame.grid(column=1, row=row, sticky=NW+E)
    self.frame.grid_columnconfigure(0, weight=1)
    self.obj = GrlObject(self, parent.spec)
    
    self.removebutton = Button(
          parent.frame, text="-", command=partial(parent.remove, self)
          )
    self.removebutton.grid(column=2, row=row, sticky=S)
    
  def refresh(self, path):
    if len(self.parent.objlist) > 1:
      self.removebutton.state(['!disabled'])
    else:
      self.removebutton.state(['disabled'])
  
    self.obj.refresh(path + "/" + str(self.row))
    
  def destroy(self):
    self.removebutton.grid_forget()
    self.removebutton.destroy()
    self.obj.destroy()
    self.frame.grid_forget()
    self.frame.destroy()
    
  def write(self, output, indent):
    print(''.ljust(indent) + '- ', file=output, end='')
    self.obj.write(output, indent+2)
    
  def load(self, config):
    self.obj.load(config)
      
  def path(self):
    return self.parent.path() + "/" + str(self.row)
  
class GrlObject:
  """Object. Contains type selector and frame for all subobjects."""
  def __init__(self, parent, spec):
    self.parent = parent
    self.spec = spec
    self.type = Combobox(parent.frame, state="readonly", width=40)
    if spec["mutability"] == "system":
      self.type['style'] = 'System.TCombobox'
    self.type.bind('<<ComboboxSelected>>', self.select)
    self.type.grid(column=0, row=0, sticky=W+E)
    self.tooltip = ToolTip(self.type, text=spec['description'], delay=1000)
    self.frame = Frame(parent.frame)
    self.frame.grid(column=0, row=1, sticky=W+E)
    self.frame.grid_columnconfigure(1, weight=1)
    self.objlist = list()
    
  def refresh(self, path):
    if grld_process and grld_process.poll() == None:
      self.type.state(['disabled'])
    else:
      self.type.state(['!disabled'])
  
    if self.spec["type"]:
      values = []
      if self.spec["optional"] == True:
        values.append("")
      values.extend(findrequests(requests, self.spec["type"]))
      values.extend(findparams(params, self.spec["type"]))
    else:
      values = findrequests(requests, path[0:-1])
      values.extend(findrequests(requests, self.spec["type"]))
    
    self.type['values'] = values
  
    # Refresh subobjects
    for obj in self.objlist:
      obj.refresh(path)

    type = self.type.get()

    # Augment type with role, if specified
    base, role = splittype(self.spec["type"])
    if role != "":
      type = type + "." + role
      
    params[path] = type
    
    # Add provided parameters
    if type in requests:
      if requests[type]:
        for key in requests[type]:
          if key != "description" and requests[type][key]["mutability"] == "provided":
            params[path + "/" + key] = requests[type][key]["type"]
    
  def destroy(self):
    self.type.grid_forget()
    self.type.destroy()
    self.frame.grid_forget()
    self.frame.destroy()
    
  def select(self, event):
    # Delete previous subobjects
    for obj in self.objlist:
      obj.destroy()
    self.objlist = list()

    type = self.type.get()
    
    # Augment type with role, if specified
    base, role = splittype(self.spec["type"])
    if role != "":
      type = type + "." + role
    
    # Add new subobjects
    row = 0
    if type in requests:
      if requests[type]:
        for key in requests[type]:
          if key != "description" and requests[type][key]["mutability"] != "provided":
            row = row + 1
            if isobject(requests[type][key]["type"]):
              obj = GrlSubObject(self, key, requests[type][key], row)
            else:
              obj = GrlVariable(self, key, requests[type][key], row)
            self.objlist.append(obj)

    if row == 0:
      # Ugly hack to force re-layout
      master = self.frame.master
      self.frame.grid_forget()
      self.frame.destroy()
      self.frame = Frame(master)
      self.frame.grid(column=0, row=1, sticky=W+E)
      self.frame.grid_columnconfigure(1, weight=1)
        
    # Recalculate parameters
    app.refresh()
    
  def write(self, output, indent):
    if self.type.get() in requests:
      print('\n' + ''.ljust(indent) + "type: " + self.type.get(), file=output)
      for obj in self.objlist:
        obj.write(output, indent)
    else:
      print(self.type.get(), file=output)
      
  def load(self, config):
    if config is None:
      return
    elif isinstance(config, str) or isinstance(config, int) or isinstance(config, float) or isinstance(config, list):
      self.type.set(str(config))
    else:
      self.type.set(config["type"])
      
    self.select(0)
    for obj in self.objlist:
      if obj.name in config:
        obj.load(config[obj.name])

  def path(self):
    return self.parent.path()
    
class GrlVariable:
  """Non-object variable. Contains fixed name label and type-dependent entry field."""
  def __init__(self, parent, name, spec, row):
            
    self.parent = parent
    self.spec = spec
    self.name = name
    self.firstrefresh = True
    
    self.label = Label(parent.frame, text=name)
    self.label.grid(column=0, row=row, sticky=NW)
    self.frame = Frame(parent.frame)
    self.frame.grid(column=1, row=row, sticky=NW+E)

    # Combobox contents tracing
    self.sv = StringVar()
    self.sv.trace("w", self.validate)

    # Every type has at least a combobox
    self.value = Combobox(self.frame, width=40, textvariable=self.sv)
    self.value.bind('<Return>', self.apply)
    
    if spec["mutability"] == "system":
      self.value['style'] = 'System.TCombobox'
    self.tooltip = ToolTip(self.value, text=spec['description'], delay=1000)

    type, role = splittype(self.spec["type"])
  
    if type == 'int' and int(spec["max"])-int(spec["min"]) < 10:
      self.value.set(spec["default"])
      self.value.grid(sticky=W+E)
      self.frame.grid_columnconfigure(0, weight=1)
    elif type == 'double' and float(spec["max"])-float(spec["min"]) < 1.0001:
      self.value.set(spec["default"])
      self.value.grid(column=0, row=0)
      self.scale = Scale(self.frame, from_=spec["min"], to=spec["max"], value=spec["default"], command=self.change)
      self.scale.grid(column=1, row=0, sticky=W+E)
      self.frame.grid_columnconfigure(1, weight=1)
    elif type == 'string' and "options" in spec and len(spec["options"]) > 0:
      self.value.set(spec["default"])
      self.value.grid(sticky=W+E)
      self.frame.grid_columnconfigure(0, weight=1)
    else:
      self.value.set(spec["default"])
      self.value.grid(sticky=W+E)
      self.frame.grid_columnconfigure(0, weight=1)
      
  def validate(self, name, index, mode):
    value = str(self.value.get())
    value = ''.join(value.split())
    dflt = str(self.spec['default'])
    dflt = ''.join(dflt.split())
  
    if self.spec["mutability"] == "system":
      self.value['style'] = 'System.TCombobox'
    elif value != dflt:
      self.value['style'] = 'Changed.TCombobox'
    else:
      self.value['style'] = 'Default.TCombobox'

    return True

  def apply(self, what):
    if grld_process and grld_process.poll() == None and self.spec["mutability"] == "online":
      grld_process.send_signal(signal.SIGINT)
      grld_process.stdin.write(self.parent.path() + " " + self.name + "=" + self.value.get() + "\n\n")
    
  def change(self, value):
    self.value.delete(0, END)
    self.value.insert(0, value)
    
  def refresh(self, path):
    type, role = splittype(self.spec["type"])

    if grld_process and grld_process.poll() == None and self.spec["mutability"] != "online":
      newstate = 'disabled'
    else:
      newstate = '!disabled'
      
    self.value.state([newstate])
    if hasattr(self, 'scale'):
      self.scale.state([newstate])
  
    if type == 'int' and self.spec["max"]-self.spec["min"] < 10:
      values = list(range(self.spec["min"], self.spec["max"]+1))
      values.extend(findparams(params, self.spec["type"]))
      self.value['values'] = values
    elif type == 'string' and "options" in self.spec and len(self.spec["options"]) > 0:
      values = self.spec["options"]
      values.extend(findparams(params, self.spec["type"]))
      self.value['values'] = values
    else:
      self.value['values'] = findparams(params, self.spec["type"])

    # This actually requires refresh to be called every time a value changes...
    if not self.value.get() in params:
      params[path + "/" + self.name] = self.spec["type"]
    
    if self.firstrefresh and self.spec['mutability'] == 'system' and len(self.value['values']) == 1:
      self.value.set(self.value['values'][0])
        
    self.firstrefresh = False

  def destroy(self):
    self.label.grid_forget()
    self.label.destroy()
    self.value.grid_forget()
    self.value.destroy()
    if hasattr(self, 'scale'):
      self.scale.grid_forget()
      self.scale.destroy()
    self.frame.grid_forget()
    self.frame.destroy()
      
  def write(self, output, indent):
    if len(self.value.get()):
      print(''.ljust(indent) + self.label.cget("text") + ": " + self.value.get(), file=output)
      
  def load(self, config):
    self.value.delete(0, END)
    self.value.insert(0, str(config))
    
  def path(self):
    return self.parent.path() + "/" + self.name

# Set up paths
binpath = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
tempfile = "/tmp/grl." + str(os.getpid()) + ".yaml"
savefile = "configuration.yaml"
if os.path.isfile(binpath + "/grld"):
  grld_executable = binpath + "/grld"
elif os.path.isfile(binpath + "/../build/grld"):
  grld_executable = binpath + "/../build/grld"
else:
  print("WARNING: Couldn't locate grld executable, running disabled")

# Load object parameter requests, generated by requestgen
stream = open(binpath + '/requests.yaml', 'r')
requests = yaml.safe_load(stream)
params = dict()
spec = {'type': '', 'description':'Experiment to run', 'optional':0}

# Setup up windowing system
root = Tk()
root.resizable(0,1)
root.title('GRL configurator')
Style().configure('Default.TCombobox', fieldbackground='lightgreen')
Style().configure('System.TCombobox', fieldbackground='lightblue')
Style().configure('Changed.TCombobox', fieldbackground='white')

# Launch window
app = GrlMain(root)

# Load configuration, if specified
if len(sys.argv) > 1:
  savefile = sys.argv[1]
  if os.path.isfile(savefile):
    print("Loading", savefile)
    stream = open(sys.argv[1], 'r')
    conf = yaml.safe_load(stream)
    app.load(conf)

# Go
root.mainloop()

if grld_process != None:
  if grld_process.poll() == None:
    grld_process.send_signal(signal.SIGINT)
    time.sleep(0.1)
    grld_process.send_signal(signal.SIGINT)
    grld_process.wait()

try:
  os.remove(tempfile)
except:
  pass
