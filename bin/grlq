#!/usr/bin/python

import yaml
import os, inspect, sys
from grllib import *

def is_number(s):
  try:
    float(s) # for int, long and float
    return True
  except ValueError:
    return False

def is_simple(s):
  if s.startswith("double") or s.startswith("int") or s.startswith("vector") or s.startswith("string"):
    return True
  else:
    return False 

binpath = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))

# Load object parameter requests, generated by requestgen
stream = file(binpath + '/requests.yaml', 'r')
requests = yaml.load(stream)

if len(sys.argv) > 1:
  arg = sys.argv[1]
else:
  arg = ""

if arg == "-r":
  roles = set();
  for req in requests:
    for p in requests[req]:
      if p != "description":
        components = requests[req][p]["type"].split('+')
        for c in components:
          if not is_number(c):
            type, role = splittype(c)
            if role != "":
              roles.add(c)

  rjust = 0
  roles = sorted(roles)
  for r in roles:
    rjust = max(rjust, len(r))
  for r in roles:
    print r.ljust(rjust+2)
else:
  matches = findrequests(requests, arg)
  if len(matches) > 1:
    mjust = 0
    for m in matches:
      mjust = max(mjust, len(m))
    for m in matches:
      print m.ljust(mjust+2) + requests[m]["description"]
  elif len(matches) == 0:
    print sys.argv[1] + " not found"
  else:
    req = requests[matches[0]]
    if req:
      print req["description"]
      pjust = 0
      tjust = 0
      djust = 0
      hasprovided = False
      hasrequested = False
      for p in req:
        if p != "description":
          pjust = max(pjust, len(p))
          tjust = max(tjust, len(req[p]["type"]))
          if is_simple(req[p]["type"]) and "default" in req[p]:
            djust = max(djust, len(str(req[p]["default"])))
          if req[p]["mutability"] == "provided":
            hasprovided = True
          else:
            hasrequested = True
            
      if hasprovided:
        print "Provided parameters:"
        for p in req:
          if p != "description" and req[p]["mutability"] == "provided":
             print "  " + p.ljust(pjust+2) + req[p]["type"].ljust(tjust+2) + "".ljust(djust+2) + req[p]["description"] 
      if hasrequested:
        print "Requested parameters:"
        for p in req:
          if p != "description" and req[p]["mutability"] != "provided":
            dflt = "" 
            if is_simple(req[p]["type"]) and "default" in req[p]:
              dflt = str(req[p]["default"])
            if djust > 0:
              dflt = dflt.ljust(djust+2)
          
            opt = "" 
            if "options" in req[p]:
              opt = ""
              for o in req[p]["options"]:
                opt = opt + ", \"" + o + "\""
              opt = " (" + opt[2:] + ")"
              
            print "  " + p.ljust(pjust+2) + req[p]["type"].ljust(tjust+2) + dflt + req[p]["description"] + opt
