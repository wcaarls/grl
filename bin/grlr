#!/usr/bin/python3
# grlr Command-line interface to grlw for running multiple configurations
#      in parallel.
#
# grlr [-d] [-p port] [-r replicates]
#   Run all agent-environment combinations in current directory
#   (agent_*.yaml / env_*.yaml).
#
#   -d
#      Only generate configurations, do not run
#   -p port
#      Listens to specified `port`
#   -r replicates
#      Replicates all experiments `replicates` times
#
# grlr [-d] <spec.yaml>
#   Run multiple experiments (possibly for different agent-environment combinations)
#   spec.yaml contains a list of experiments. Each experiment defines a `file`, a
#   `configuration` (parameters that do not change across experiments) and the
#   `parameters` to modify. All possible parameter combinations are executed.
#
#   The `file` states the base configuration to use, or 'all' to run all agent-
#   environment combinations in the current directory.
#
#   `configuration` parameters are defined as dictionaries:
#      name: parameter_name
#      value: parameter_value
#
#   Modifed `parameters` are defined the same way, but with multiple values:
#      name: parameter_name
#      values:
#        - first_value
#        - second_value
#
#   In configuration parameters, the special sequence '$@' refers to the base
#   configuration filename, '$<index>' (e.g. $0, $1, etc.) refers to the current
#   value of parameter `index` (e.g. first_value, second_value), and #<index>
#   refers to the current value's index of parameter `index` (e.g. 0, 1).
#
#   In modified parameters, the special sequence '$*' refers to the original value
#   of the parameter, so you can write '$* * 2' to multiply the original value by 2.
#
#   Example spec.yaml:
#
#     - file: all
#       configuration:
#         - name: experiment/output
#           value: $@_alpha$0_lamba$1
#       parameters:
#         - name: experiment/agent/predictor/alpha
#           values:
#             - 0.1
#             - 0.2
#             - 0.3
#         - name: experiment/agent/predictor/lambda
#           values:
#             - 0.3
#             - 0.5
#             - 0.7
#
# grlr [-p port] [-r replicates] <config.yaml>
#   Run single configuration
#
# grlr [-d] [-p port] [-r replicates] <spec_or_config.yaml> [spec_or_config.yaml...]
#   Run all experiments/configurations specified

import yaml, os, sys, glob, copy, getopt
from grllib import *

counter = 0

def progress(maxlen, workers, strlen=60):
  alive = 0
  for w in workers:
    if w.alive():
      alive = alive + 1

  w = int(len(workers)*strlen/maxlen)
  a = int(alive*strlen/maxlen)
  
  print('\r[' + '#'*(w-a) + '+'*a + '.'*(strlen-w) + ']', int((len(workers)-alive)*100/maxlen), '%', end='')
  sys.stdout.flush()

def fuzz(name, conf, e, dry):
  orig = copy.deepcopy(conf)
  hasparams = "parameters" in e
  hasconfig = "configuration" in e
  
  if hasparams:
    indices = [0] * len(e["parameters"])

  # Iterate over variable combinations
  while True:
    # Construct configuration for this combination
    conf = copy.deepcopy(orig)
    
    if hasconfig:
      # Non-cycling configuration parameters
      for c in e["configuration"]:
        value = str(c["value"])
        value = value.replace("$@", name)
        
        if hasparams:
          for i in range(len(e["parameters"])):
            value = value.replace("$%d" % i, str(e["parameters"][i]["values"][indices[i]]))
          for i in range(len(e["parameters"])):
            value = value.replace("#%d" % i, str(indices[i]))
        setconf(conf, c["name"], value)
      
    if hasparams:
      # Cycling configuration parameters
      for i in range(len(e["parameters"])):
        p = e["parameters"][i]
        value = str(p["values"][indices[i]])
        value = value.replace("$*", str(getconf(conf, p["name"])))
        setconf(conf, p["name"], value)
      
    if dry:
      # Save configuration  
      global counter
      stream = open(name + '_' + str(counter) + '.yaml', 'w')
      stream.write(yaml.dump(conf))
      stream.close()
      counter = counter + 1
    else:
      # Enqueue job
      yield yaml.dump(conf)
    
    if hasparams:
      # Increment
      for i in range(len(e["parameters"])):
        indices[i] = indices[i] + 1
        if indices[i] == len(e["parameters"][i]["values"]):
          indices[i] = 0
        else:
          break

      # Stop when we're back at the beginning
      if indices == [0] * len(indices):
        break
    else:
      # No parameters to cycle though, just exit
      break

if __name__ == '__main__':
  specs = [[{'file':'all', 'configuration':[{'name':'experiment/output', 'value':'$@', 'name':'output_file', 'value':'$@'}]}]]
  offsets = []
  dry = False    

  try:
    opts, args = getopt.getopt(sys.argv[1:], "dp:r:")
  except getopt.GetoptError:
    print('grlr [-d] [spec.yaml]')
    sys.exit(2)

  port = 3373
  for opt, arg in opts:
    if opt == '-d':
      dry = True
      print("Dry run: just generating configurations")
    if opt == '-p':
      port = int(arg)
    if opt == '-r':
      offsets = {'parameters':[{'name':'experiment/run_offset', 'values':[str(100*i) for i in range(int(arg))]}]}
      
  global srv
  srv = Server(port=port)

  if len(args) > 0:
    specs = []
    for arg in args:
      stream = open(arg, 'r')
      specs.append(yaml.safe_load(stream))
      stream.close()

  jobs = [];
  
  for idx, spec in enumerate(specs):
    if not isinstance(spec, list):
      # Single configuration
      spec = [{'file':args[idx]}]
  
    # Iterate over experiments
    for exp in spec:
      exp = mergeconf(exp, offsets)
      if exp["file"] == "all":
        # All combinations of agents and environments in current directory
        for env in glob.glob('env_*.yaml'):
          for agent in glob.glob('agent_*.yaml'):
            conf = mergeconf(readconf(env), readconf(agent))
            for job in fuzz(os.path.basename(env)[4:-5] + "_" + os.path.basename(agent)[6:-5], conf, exp, dry):
              jobs.append(job)
      else:
        # Specific file, possibly with wildcards
        for f in glob.glob(exp["file"]):
          conf = readconf(f)
          for job in fuzz(os.path.basename(f)[:-5], conf, exp, dry):
            jobs.append(job)

  if len(jobs) > 0:
    # Submit jobs
    workers = []
    for job in jobs:
      progress(len(jobs), workers)
      workers.append(srv.submit(job))
      
    # Await results
    for w in workers:
      progress(len(jobs), workers)
      w.read('cumulative')

    progress(len(jobs), workers)
    print()
  